@book{clrs_algorithms,
    isbn = {9780262033848},
    year = {2009},
    pages = {1314},
    title = {Introduction to Algorithms, third edition},
    abstract = {The latest edition of the essential text and professional reference, with substantial new material on such topics as vEB trees, multithreaded algorithms, dynamic programming, and edge-based flow. Some books on algorithms are rigorous but incomplete; others cover masses of material but lack rigor. Introduction to Algorithms uniquely combines rigor and comprehensiveness. The book covers a broad range of algorithms in depth, yet makes their design and analysis accessible to all levels of readers. Each chapter is relatively self-contained and can be used as a unit of study. The algorithms are described in English and in a pseudocode designed to be readable by anyone who has done a little programming. The explanations have been kept elementary without sacrificing depth of coverage or mathematical rigor. The first edition became a widely used text in universities worldwide as well as the standard reference for professionals. The second edition featured new chapters on the role of algorithms, probabilistic analysis and randomized algorithms, and linear programming. The third edition has been revised and updated throughout. It includes two completely new chapters, on van Emde Boas trees and multithreaded algorithms, substantial additions to the chapter on recurrence (now called “Divide-and-Conquer”), and an appendix on matrices. It features improved treatment of dynamic programming and greedy algorithms and a new notion of edge-based flow in the material on flow networks. Many exercises and problems have been added for this edition. The international paperback edition is no longer available; the hardcover is available worldwide.},
    language = {en},
    publisher = {MIT Press},
    author = {Thomas H. Cormen and Charles E. Leiserson and Ronald L. Rivest and Clifford Stein}
}

@inproceedings{sorting_the_slow_way,
author = {Gruber, Hermann and Holzer, Markus and Ruepp, Oliver},
year = {2007},
month = {06},
pages = {183-197},
title = {Sorting the Slow Way: An Analysis of Perversely Awful Randomized Sorting Algorithms},
volume = {4475},
isbn = {978-3-540-72913-6},
doi = {10.1007/978-3-540-72914-3_17}
}

@book{the_skiena_2010,
    isbn = {9781849967204},
    year = {2010},
    title = {The Algorithm Design Manual},
    abstract = {Most professional programmers that I’ve encountered are not well prepared to tackle algorithm design problems. This is a pity, because the techniques of algorithm design form one of the core practical technologies of computer science. Designing correct, efficient, and implementable algorithms for real-world problems requires access to two distinct bodies of knowledge: • Techniques – Good algorithm designers understand several fundamental algorithm design techniques, including data structures, dynamic programming, depth first search, backtracking, and heuristics. Perhaps the single most important design technique is modeling, the art of abstracting a messy real-world application into a clean problem suitable for algorithmic attack. • Resources – Good algorithm designers stand on the shoulders of giants. Rather than laboring from scratch to produce a new algorithm for every task, they can figure out what is known about a particular problem. Rather than re-implementing popular algorithms from scratch, they seek existing implementations to serve as a starting point. They are familiar with many classic algorithmic problems, which provide sufficient source material to model most any application. This book is intended as a manual on algorithm design, providing access to combinatorial algorithm technology for both students and computer professionals.},
    language = {en},
    publisher = {Springer},
    author = {Steven S Skiena}
}

@article{ali2021sorting,
  title={Sorting and Classification of Sorting Algorithms},
  author={Ali, Rouf},
  journal={Turkish Journal of Computer and Mathematics Education (TURCOMAT)},
  volume={12},
  number={14},
  pages={5920--5924},
  year={2021}
}